import { Registry, isTsProtoGeneratedType, GeneratedType } from "@cosmjs/proto-signing";
import { defaultRegistryTypes } from "@cosmjs/stargate";

import * as v1beta1 from "../../proto/akash/v1beta1";
import * as v1beta2 from "../../proto/akash/v1beta2";

const akashTypes: ReadonlyArray<[string, GeneratedType]> = [...Object.values(v1beta1), ...Object.values(v1beta2)].map((x) => ["/" + x.$type, x]);

export function decodeMsg(type: string, msg) {
  const myRegistry = new Registry([...defaultRegistryTypes, ...akashTypes]);

  const msgType = myRegistry.lookupType(type);

  if (!msgType) {
    throw new Error("Type not found: " + type);
  }

  if (!isTsProtoGeneratedType(msgType)) {
    throw new Error("Type is not generated by ts-protobuf: " + type);
  }

  return msgType.decode(msg);
}

export function msgToJSON(type: string, msg) {
  const myRegistry = new Registry([...defaultRegistryTypes, ...akashTypes]);

  const msgType = myRegistry.lookupType(type);

  if (!msgType) {
    throw new Error("Type not found: " + type);
  }

  if (!isTsProtoGeneratedType(msgType)) {
    throw new Error("Type is not generated by ts-protobuf: " + type);
  }

  return msgType.toJSON(msgType.decode(msg));
}

export function uint8arrayToString(arr: Uint8Array) {
  return new TextDecoder().decode(arr);
}
